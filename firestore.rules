/**
 * @fileoverview Firestore Security Rules for the FinLit Tutor application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to globally shared data (badges).  All user-specific
 * data is nested under `/users/{userId}` and access is controlled by verifying
 * that `request.auth.uid` matches the `userId` path parameter.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.  Only the authenticated user can read/write their own profile.
 * - /users/{userId}/learningPaths/{learningPathId}: Stores learning paths for a specific user.
 * - /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}: Stores modules within a learning path.
 * - /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}/lessons/{lessonId}: Stores lessons within a module.
 * - /users/{userId}/financialAssessments/{assessmentId}: Stores financial assessments for a specific user.
 * - /badges/{badgeId}: Stores global badge definitions.  These are publicly readable.
 * - /users/{userId}/userBadges/{userBadgeId}: Stores the association between users and badges they have earned.
 * - /users/{userId}/progress/{progressId}: Stores progress information for a specific user.
 * - /users/{userId}/goals/{goalId}: Stores financial goals for a specific user.
 * - /users/{userId}/budgets/{budgetId}: Stores budget information for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Badges are publicly readable but not writable by clients.  A separate mechanism (e.g., Cloud Functions) would be needed to manage badges.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 * The `LearningPath`, `FinancialAssessment`, `UserBadge`, and `Progress` collections each include the `userId` field.
 * This allows security rules to validate user access without needing to perform `get()` operations on parent documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.  Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's ID matches the requested ID.
     * @deny (get, create, update, delete) if the user's ID does not match the requested ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to learning paths specific to a user. Only the owner can read or write.
     * @path /users/{userId}/learningPaths/{learningPathId}
     * @allow (get, create, update, delete) if the user's ID matches the requested ID and the userId in the document.
     * @deny (get, create, update, delete) if the user's ID does not match the requested ID or the userId in the document.
     * @principle Enforces document ownership and validates the userId in the document on create.
     */
    match /users/{userId}/learningPaths/{learningPathId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to modules within a learning path. Only the owner of the learning path can read or write.
     * @path /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Inherits authorization from the parent learning path.
     */
    match /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to lessons within a module. Only the owner of the module can read or write.
     * @path /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}/lessons/{lessonId}
     * @allow (get, create, update, delete) if the user is the owner.
     * @deny (get, create, update, delete) if the user is not the owner.
     * @principle Inherits authorization from the parent module.
     */
    match /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}/lessons/{lessonId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to financial assessments for a specific user. Only the owner can read or write.
     * @path /users/{userId}/financialAssessments/{assessmentId}
     * @allow (get, create, update, delete) if the user's ID matches the requested ID and the userId in the document.
     * @deny (get, create, update, delete) if the user's ID does not match the requested ID or the userId in the document.
     * @principle Enforces document ownership and validates the userId in the document on create.
     */
    match /users/{userId}/financialAssessments/{assessmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to global badge definitions.  Badges are globally accessible and not writable by clients.
     * @path /badges/{badgeId}
     * @allow (get, list) for all users.
     * @deny (create, update, delete) for all users.  Badges are managed through a separate admin process.
     * @principle Public read access with restricted writes.
     */
    match /badges/{badgeId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the association between users and badges they have earned. Only the owner can read or write.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (get, create, update, delete) if the user's ID matches the requested ID and the userId in the document.
     * @deny (get, create, update, delete) if the user's ID does not match the requested ID or the userId in the document.
     * @principle Enforces document ownership and validates the userId in the document on create.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to progress information for a specific user. Only the owner can read or write.
     * @path /users/{userId}/progress/{progressId}
     * @allow (get, create, update, delete) if the user's ID matches the requested ID and the userId in the document.
     * @deny (get, create, update, delete) if the user's ID does not match the requested ID or the userId in the document.
     * @principle Enforces document ownership and validates the userId in the document on create.
     */
    match /users/{userId}/progress/{progressId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to financial goals for a specific user.
     * @path /users/{userId}/goals/{goalId}
     * @allow (get, create, update, delete) if the user's ID matches the requested ID.
     * @deny (get, create, update, delete) if the user's ID does not match the requested ID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/goals/{goalId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }


      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

       /**
        * @description Controls access to budget information for a specific user.
        * @path /users/{userId}/budgets/{budgetId}
        * @allow (get, create, update, delete) if the user's ID matches the requested ID.
        * @deny (get, create, update, delete) if the user's ID does not match the requested ID.
        * @principle Enforces document ownership for all operations.
        */
    match /users/{userId}/budgets/{budgetId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}