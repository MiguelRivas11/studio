rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId and that the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) User with ID matching auth.uid can create their profile.
     * @deny (create) User with ID not matching auth.uid cannot create a profile.
     * @allow (get) Any user can get this document.
     * @deny (update) User cannot update if not owner.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to learning paths to the owning user.
     * @path /users/{userId}/learningPaths/{learningPathId}
     * @allow (create) User can create a learning path with their ID.
     * @deny (create) User cannot create a learning path for another user.
     * @allow (get) User can read their own learning path.
     * @deny (update) User cannot update another user's learning path.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/learningPaths/{learningPathId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to modules to the owning user.
     * @path /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}
     * @allow (create) User can create a module within their learning path.
     * @deny (create) User cannot create a module for another user's learning path.
     * @allow (get) User can read their own module.
     * @deny (update) User cannot update another user's module.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to lessons to the owning user.
     * @path /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}/lessons/{lessonId}
     * @allow (create) User can create a lesson within their module.
     * @deny (create) User cannot create a lesson for another user's module.
     * @allow (get) User can read their own lesson.
     * @deny (update) User cannot update another user's lesson.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/learningPaths/{learningPathId}/modules/{moduleId}/lessons/{lessonId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to financial assessments to the owning user.
     * @path /users/{userId}/financialAssessments/{assessmentId}
     * @allow (create) User can create a financial assessment with their ID.
     * @deny (create) User cannot create a financial assessment for another user.
     * @allow (get) User can read their own financial assessment.
     * @deny (update) User cannot update another user's financial assessment.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/financialAssessments/{assessmentId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to badges.
     * @path /badges/{badgeId}
     * @allow (get) Any user can read badges.
     * @deny (create) Writes are not defined, so denied.
     * @principle Allows public read, restricts write access.
     */
    match /badges/{badgeId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to user badges to the owning user.
     * @path /users/{userId}/userBadges/{userBadgeId}
     * @allow (create) User can create a user badge with their ID.
     * @deny (create) User cannot create a user badge for another user.
     * @allow (get) User can read their own user badge.
     * @deny (update) User cannot update another user's user badge.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/userBadges/{userBadgeId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restricts access to progress to the owning user.
     * @path /users/{userId}/progress/{progressId}
     * @allow (create) User can create progress with their ID.
     * @deny (create) User cannot create progress for another user.
     * @allow (get) User can read their own progress.
     * @deny (update) User cannot update another user's progress.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/progress/{progressId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

      /**
       * @description Restricts access to goals to the owning user.
       * @path /users/{userId}/goals/{goalId}
       * @allow (create) User can create a goal with their ID.
       * @deny (create) User cannot create a goal for another user.
       * @allow (get) User can read their own goal.
       * @deny (update) User cannot update another user's goal.
       * @principle Enforces document ownership for writes.
       */
    match /users/{userId}/goals/{goalId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

     /**
      * @description Restricts access to budget to the owning user.
      * @path /users/{userId}/budgets/{budgetId}
      * @allow (create) User can create a budget with their ID.
      * @deny (create) User cannot create a budget for another user.
      * @allow (get) User can read their own budget.
      * @deny (update) User cannot update another user's budget.
      * @principle Enforces document ownership for writes.
      */
    match /users/{userId}/budgets/{budgetId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}